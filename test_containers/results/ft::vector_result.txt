

--------------------------------
------	TESTING VECTOR 1 ------
--------------------------------
		VECTOR TYPE: char

test 1:	operator[]: c c c c c c c c c c c c 
test 2:	size: 12
test 3:	capacity: 12
test 4:	empty: 0
test 5:	iterators: c c c c c c c c c c c c 
test 6:	at: c c c c c c c c c c c c vector
test 7:	front: c
test 8:	back: c
test 9:	push_back: new elem = c
test 10:	pop_back: new elem = c
test 11:	swap: size of tmp = 13 and size of vec = 12
			size of tmp = 12 and size of vec = 13
test 12:	resize: size of tmp = 13
			new elem = c			size of tmp after resize = 3
test 13:	assign1: size of tmp = 13
			new elem = c			size after assign = 3and content is:
			c | c | c | 
test 14:	assign2: size of tmp = 13
			new elem = c			size after assign = 3and content is:
			c | c | c | 
test 15:	insert1: size of tmp = 13
			return value: c
			return value: c
			return value: c
			c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 16
test 16:	insert2: size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 28
test 17:	insert3: size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 52
test 18:	erase1: size of tmp = 13
			size of tmp = 0
			size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 13
			new elem after erase: c
			size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 12
			size of tmp = 13
			c | 
			size of tmp = 1
test 19:	erase2: size of tmp = 13
			new elem after erase: c
			size of tmp = 12
			size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 12
			size of tmp = 13
			c | 
			size of tmp = 12
test 20:	clear: size before clear: 13 | size after clear: 0new elem pushed after clear: c
test 21:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 2 ------
--------------------------------
		VECTOR TYPE: char

test 22:	operator[]: c c c c c c c c c c c c 
test 23:	size: 12
test 24:	capacity: 12
test 25:	empty: 0
test 26:	iterators: c c c c c c c c c c c c 
test 27:	at: c c c c c c c c c c c c vector
test 28:	front: c
test 29:	back: c
test 30:	push_back: new elem = c
test 31:	pop_back: new elem = c
test 32:	swap: size of tmp = 13 and size of vec = 12
			size of tmp = 12 and size of vec = 13
test 33:	resize: size of tmp = 13
			new elem = c			size of tmp after resize = 3
test 34:	assign1: size of tmp = 13
			new elem = c			size after assign = 3and content is:
			c | c | c | 
test 35:	assign2: size of tmp = 13
			new elem = c			size after assign = 3and content is:
			c | c | c | 
test 36:	insert1: size of tmp = 13
			return value: c
			return value: c
			return value: c
			c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 16
test 37:	insert2: size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 28
test 38:	insert3: size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 52
test 39:	erase1: size of tmp = 13
			size of tmp = 0
			size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 13
			new elem after erase: c
			size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 12
			size of tmp = 13
			c | 
			size of tmp = 1
test 40:	erase2: size of tmp = 13
			new elem after erase: c
			size of tmp = 12
			size of tmp = 13
			c | c | c | c | c | c | c | c | c | c | c | c | 
			size of tmp = 12
			size of tmp = 13
			c | 
			size of tmp = 12
test 41:	clear: size before clear: 13 | size after clear: 0new elem pushed after clear: c
test 42:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 3 ------
--------------------------------
		VECTOR TYPE: char

test 43:	operator[]: a 
test 44:	size: 1
test 45:	capacity: 1
test 46:	empty: 0
test 47:	iterators: a 
test 48:	at: a vector
test 49:	front: a
test 50:	back: a
test 51:	push_back: new elem = a
test 52:	pop_back: new elem = a
test 53:	swap: size of tmp = 2 and size of vec = 1
			size of tmp = 1 and size of vec = 2
test 54:	resize: size of tmp = 2
			new elem = a			size of tmp after resize = 3
test 55:	assign1: size of tmp = 2
			new elem = a			size after assign = 3and content is:
			a | a | a | 
test 56:	assign2: size of tmp = 2
			new elem = a			size after assign = 3and content is:
			a | a | a | 
test 57:	insert1: size of tmp = 2
			return value: a
			return value: a
			return value: a
			a | a | a | a | a | 
			size of tmp = 5
test 58:	insert2: size of tmp = 2
			a | a | a | a | a | a | a | a | a | a | a | a | a | a | a | a | a | 
			size of tmp = 17
test 59:	insert3: size of tmp = 2
			a | a | a | a | a | a | a | a | 
			size of tmp = 8
test 60:	erase1: size of tmp = 2
			size of tmp = 0
			size of tmp = 2
			a | a | 
			size of tmp = 2
			new elem after erase: a
			size of tmp = 2
			a | 
			size of tmp = 1
			size of tmp = 2
			a | 
			size of tmp = 1
test 61:	erase2: size of tmp = 2
			new elem after erase: a
			size of tmp = 1
			size of tmp = 2
			a | 
			size of tmp = 1
			size of tmp = 2
			a | 
			size of tmp = 1
test 62:	clear: size before clear: 2 | size after clear: 0new elem pushed after clear: a
test 63:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 4 ------
--------------------------------
		VECTOR TYPE: char

test 64:	operator[]: a 
test 65:	size: 1
test 66:	capacity: 1
test 67:	empty: 0
test 68:	iterators: a 
test 69:	at: a vector
test 70:	front: a
test 71:	back: a
test 72:	push_back: new elem = a
test 73:	pop_back: new elem = a
test 74:	swap: size of tmp = 2 and size of vec = 1
			size of tmp = 1 and size of vec = 2
test 75:	resize: size of tmp = 2
			new elem = a			size of tmp after resize = 3
test 76:	assign1: size of tmp = 2
			new elem = a			size after assign = 3and content is:
			a | a | a | 
test 77:	assign2: size of tmp = 2
			new elem = a			size after assign = 3and content is:
			a | a | a | 
test 78:	insert1: size of tmp = 2
			return value: a
			return value: a
			return value: a
			a | a | a | a | a | 
			size of tmp = 5
test 79:	insert2: size of tmp = 2
			a | a | a | a | a | a | a | a | a | a | a | a | a | a | a | a | a | 
			size of tmp = 17
test 80:	insert3: size of tmp = 2
			a | a | a | a | a | a | a | a | 
			size of tmp = 8
test 81:	erase1: size of tmp = 2
			size of tmp = 0
			size of tmp = 2
			a | a | 
			size of tmp = 2
			new elem after erase: a
			size of tmp = 2
			a | 
			size of tmp = 1
			size of tmp = 2
			a | 
			size of tmp = 1
test 82:	erase2: size of tmp = 2
			new elem after erase: a
			size of tmp = 1
			size of tmp = 2
			a | 
			size of tmp = 1
			size of tmp = 2
			a | 
			size of tmp = 1
test 83:	clear: size before clear: 2 | size after clear: 0new elem pushed after clear: a
test 84:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 5 ------
--------------------------------
		VECTOR TYPE: int

test 85:	operator[]: 100 100 100 100 100 
test 86:	size: 5
test 87:	capacity: 5
test 88:	empty: 0
test 89:	iterators: 100 100 100 100 100 
test 90:	at: 100 100 100 100 100 vector
test 91:	front: 100
test 92:	back: 100
test 93:	push_back: new elem = 100
test 94:	pop_back: new elem = 100
test 95:	swap: size of tmp = 6 and size of vec = 5
			size of tmp = 5 and size of vec = 6
test 96:	resize: size of tmp = 6
			new elem = 100			size of tmp after resize = 3
test 97:	assign1: size of tmp = 6
			new elem = 100			size after assign = 3and content is:
			100 | 100 | 100 | 
test 98:	assign2: size of tmp = 6
			new elem = 100			size after assign = 3and content is:
			100 | 100 | 100 | 
test 99:	insert1: size of tmp = 6
			return value: 100
			return value: 100
			return value: 100
			100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 9
test 100:	insert2: size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 21
test 101:	insert3: size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 24
test 102:	erase1: size of tmp = 6
			size of tmp = 0
			size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 6
			new elem after erase: 100
			size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 
			size of tmp = 5
			size of tmp = 6
			100 | 
			size of tmp = 1
test 103:	erase2: size of tmp = 6
			new elem after erase: 100
			size of tmp = 5
			size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 
			size of tmp = 5
			size of tmp = 6
			100 | 
			size of tmp = 5
test 104:	clear: size before clear: 6 | size after clear: 0new elem pushed after clear: 100
test 105:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 6 ------
--------------------------------
		VECTOR TYPE: int

test 106:	operator[]: 
test 107:	size: 0
test 108:	capacity: 0
test 109:	empty: 1
test 110:	iterators: 
test 111:	at: vector
test 112:	front: 
test 113:	back: 
test 114:	push_back: new elem = 0
test 115:	pop_back: 
test 116:	swap: size of tmp = 1 and size of vec = 0
			size of tmp = 0 and size of vec = 1
test 117:	resize: size of tmp = 1
			new elem = 0			size of tmp after resize = 3
test 118:	assign1: size of tmp = 1
			new elem = 0			size after assign = 3and content is:
			0 | 0 | 0 | 
test 119:	assign2: size of tmp = 1
			new elem = 0			size after assign = 3and content is:
			0 | 0 | 0 | 
test 120:	insert1: size of tmp = 1
			return value: 0
			return value: 0
			return value: 0
			0 | 0 | 0 | 0 | 
			size of tmp = 4
test 121:	insert2: size of tmp = 1
			0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 
			size of tmp = 16
test 122:	insert3: size of tmp = 1
			0 | 0 | 0 | 0 | 
			size of tmp = 4
test 123:	erase1: size of tmp = 1
			size of tmp = 0
			size of tmp = 1
			0 | 
			size of tmp = 1
			new elem after erase: 0
			size of tmp = 1
			
			size of tmp = 0
			size of tmp = 1
			0 | 
			size of tmp = 1
test 124:	erase2: size of tmp = 1
			size of tmp = 0
			size of tmp = 1
			
			size of tmp = 0
			
test 125:	clear: size before clear: 1 | size after clear: 0new elem pushed after clear: 0
test 126:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 7 ------
--------------------------------
		VECTOR TYPE: int

test 127:	operator[]: 89123891 
test 128:	size: 1
test 129:	capacity: 1
test 130:	empty: 0
test 131:	iterators: 89123891 
test 132:	at: 89123891 vector
test 133:	front: 89123891
test 134:	back: 89123891
test 135:	push_back: new elem = 89123891
test 136:	pop_back: new elem = 89123891
test 137:	swap: size of tmp = 2 and size of vec = 1
			size of tmp = 1 and size of vec = 2
test 138:	resize: size of tmp = 2
			new elem = 89123891			size of tmp after resize = 3
test 139:	assign1: size of tmp = 2
			new elem = 89123891			size after assign = 3and content is:
			89123891 | 89123891 | 89123891 | 
test 140:	assign2: size of tmp = 2
			new elem = 89123891			size after assign = 3and content is:
			89123891 | 89123891 | 89123891 | 
test 141:	insert1: size of tmp = 2
			return value: 89123891
			return value: 89123891
			return value: 89123891
			89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 
			size of tmp = 5
test 142:	insert2: size of tmp = 2
			89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 
			size of tmp = 17
test 143:	insert3: size of tmp = 2
			89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 89123891 | 
			size of tmp = 8
test 144:	erase1: size of tmp = 2
			size of tmp = 0
			size of tmp = 2
			89123891 | 89123891 | 
			size of tmp = 2
			new elem after erase: 89123891
			size of tmp = 2
			89123891 | 
			size of tmp = 1
			size of tmp = 2
			89123891 | 
			size of tmp = 1
test 145:	erase2: size of tmp = 2
			new elem after erase: 89123891
			size of tmp = 1
			size of tmp = 2
			89123891 | 
			size of tmp = 1
			size of tmp = 2
			89123891 | 
			size of tmp = 1
test 146:	clear: size before clear: 2 | size after clear: 0new elem pushed after clear: 89123891
test 147:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 8 ------
--------------------------------
		VECTOR TYPE: int

test 148:	operator[]: 100 100 100 100 100 
test 149:	size: 5
test 150:	capacity: 5
test 151:	empty: 0
test 152:	iterators: 100 100 100 100 100 
test 153:	at: 100 100 100 100 100 vector
test 154:	front: 100
test 155:	back: 100
test 156:	push_back: new elem = 100
test 157:	pop_back: new elem = 100
test 158:	swap: size of tmp = 6 and size of vec = 5
			size of tmp = 5 and size of vec = 6
test 159:	resize: size of tmp = 6
			new elem = 100			size of tmp after resize = 3
test 160:	assign1: size of tmp = 6
			new elem = 100			size after assign = 3and content is:
			100 | 100 | 100 | 
test 161:	assign2: size of tmp = 6
			new elem = 100			size after assign = 3and content is:
			100 | 100 | 100 | 
test 162:	insert1: size of tmp = 6
			return value: 100
			return value: 100
			return value: 100
			100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 9
test 163:	insert2: size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 21
test 164:	insert3: size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 24
test 165:	erase1: size of tmp = 6
			size of tmp = 0
			size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 6
			new elem after erase: 100
			size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 
			size of tmp = 5
			size of tmp = 6
			100 | 
			size of tmp = 1
test 166:	erase2: size of tmp = 6
			new elem after erase: 100
			size of tmp = 5
			size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 
			size of tmp = 5
			size of tmp = 6
			100 | 
			size of tmp = 5
test 167:	clear: size before clear: 6 | size after clear: 0new elem pushed after clear: 100
test 168:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 9 ------
--------------------------------
		VECTOR TYPE: int

test 169:	operator[]: 100 100 100 100 100 
test 170:	size: 5
test 171:	capacity: 5
test 172:	empty: 0
test 173:	iterators: 100 100 100 100 100 
test 174:	at: 100 100 100 100 100 vector
test 175:	front: 100
test 176:	back: 100
test 177:	push_back: new elem = 100
test 178:	pop_back: new elem = 100
test 179:	swap: size of tmp = 6 and size of vec = 5
			size of tmp = 5 and size of vec = 6
test 180:	resize: size of tmp = 6
			new elem = 100			size of tmp after resize = 3
test 181:	assign1: size of tmp = 6
			new elem = 100			size after assign = 3and content is:
			100 | 100 | 100 | 
test 182:	assign2: size of tmp = 6
			new elem = 100			size after assign = 3and content is:
			100 | 100 | 100 | 
test 183:	insert1: size of tmp = 6
			return value: 100
			return value: 100
			return value: 100
			100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 9
test 184:	insert2: size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 21
test 185:	insert3: size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 24
test 186:	erase1: size of tmp = 6
			size of tmp = 0
			size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 100 | 
			size of tmp = 6
			new elem after erase: 100
			size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 
			size of tmp = 5
			size of tmp = 6
			100 | 
			size of tmp = 1
test 187:	erase2: size of tmp = 6
			new elem after erase: 100
			size of tmp = 5
			size of tmp = 6
			100 | 100 | 100 | 100 | 100 | 
			size of tmp = 5
			size of tmp = 6
			100 | 
			size of tmp = 5
test 188:	clear: size before clear: 6 | size after clear: 0new elem pushed after clear: 100
test 189:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 10 ------
--------------------------------
		VECTOR TYPE: double*

test 190:	operator[]: 
test 191:	size: 0
test 192:	capacity: 0
test 193:	empty: 1
test 194:	iterators: 
test 195:	at: vector
test 196:	front: 
test 197:	back: 
test 198:	push_back: new elem = 0x0
test 199:	pop_back: 
test 200:	swap: size of tmp = 1 and size of vec = 0
			size of tmp = 0 and size of vec = 1
test 201:	resize: size of tmp = 1
			new elem = 0x0			size of tmp after resize = 3
test 202:	assign1: size of tmp = 1
			new elem = 0x0			size after assign = 3and content is:
			0x0 | 0x0 | 0x0 | 
test 203:	assign2: size of tmp = 1
			new elem = 0x0			size after assign = 3and content is:
			0x0 | 0x0 | 0x0 | 
test 204:	insert1: size of tmp = 1
			return value: 0x0
			return value: 0x0
			return value: 0x0
			0x0 | 0x0 | 0x0 | 0x0 | 
			size of tmp = 4
test 205:	insert2: size of tmp = 1
			0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 0x0 | 
			size of tmp = 16
test 206:	insert3: size of tmp = 1
			0x0 | 0x0 | 0x0 | 0x0 | 
			size of tmp = 4
test 207:	erase1: size of tmp = 1
			size of tmp = 0
			size of tmp = 1
			0x0 | 
			size of tmp = 1
			new elem after erase: 0x0
			size of tmp = 1
			
			size of tmp = 0
			size of tmp = 1
			0x0 | 
			size of tmp = 1
test 208:	erase2: size of tmp = 1
			size of tmp = 0
			size of tmp = 1
			
			size of tmp = 0
			
test 209:	clear: size before clear: 1 | size after clear: 0new elem pushed after clear: 0x0
test 210:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 11 ------
--------------------------------
		VECTOR TYPE: double*

test 211:	operator[]: 0x7ffeef33bae0 
test 212:	size: 1
test 213:	capacity: 1
test 214:	empty: 0
test 215:	iterators: 0x7ffeef33bae0 
test 216:	at: 0x7ffeef33bae0 vector
test 217:	front: 0x7ffeef33bae0
test 218:	back: 0x7ffeef33bae0
test 219:	push_back: new elem = 0x7ffeef33bae0
test 220:	pop_back: new elem = 0x7ffeef33bae0
test 221:	swap: size of tmp = 2 and size of vec = 1
			size of tmp = 1 and size of vec = 2
test 222:	resize: size of tmp = 2
			new elem = 0x7ffeef33bae0			size of tmp after resize = 3
test 223:	assign1: size of tmp = 2
			new elem = 0x7ffeef33bae0			size after assign = 3and content is:
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
test 224:	assign2: size of tmp = 2
			new elem = 0x7ffeef33bae0			size after assign = 3and content is:
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
test 225:	insert1: size of tmp = 2
			return value: 0x7ffeef33bae0
			return value: 0x7ffeef33bae0
			return value: 0x7ffeef33bae0
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
			size of tmp = 5
test 226:	insert2: size of tmp = 2
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
			size of tmp = 17
test 227:	insert3: size of tmp = 2
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
			size of tmp = 8
test 228:	erase1: size of tmp = 2
			size of tmp = 0
			size of tmp = 2
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 
			size of tmp = 2
			new elem after erase: 0x7ffeef33bae0
			size of tmp = 2
			0x7ffeef33bae0 | 
			size of tmp = 1
			size of tmp = 2
			0x7ffeef33bae0 | 
			size of tmp = 1
test 229:	erase2: size of tmp = 2
			new elem after erase: 0x7ffeef33bae0
			size of tmp = 1
			size of tmp = 2
			0x7ffeef33bae0 | 
			size of tmp = 1
			size of tmp = 2
			0x7ffeef33bae0 | 
			size of tmp = 1
test 230:	clear: size before clear: 2 | size after clear: 0new elem pushed after clear: 0x7ffeef33bae0
test 231:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 12 ------
--------------------------------
		VECTOR TYPE: double*

test 232:	operator[]: 0x7ffeef33bae0 
test 233:	size: 1
test 234:	capacity: 1
test 235:	empty: 0
test 236:	iterators: 0x7ffeef33bae0 
test 237:	at: 0x7ffeef33bae0 vector
test 238:	front: 0x7ffeef33bae0
test 239:	back: 0x7ffeef33bae0
test 240:	push_back: new elem = 0x7ffeef33bae0
test 241:	pop_back: new elem = 0x7ffeef33bae0
test 242:	swap: size of tmp = 2 and size of vec = 1
			size of tmp = 1 and size of vec = 2
test 243:	resize: size of tmp = 2
			new elem = 0x7ffeef33bae0			size of tmp after resize = 3
test 244:	assign1: size of tmp = 2
			new elem = 0x7ffeef33bae0			size after assign = 3and content is:
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
test 245:	assign2: size of tmp = 2
			new elem = 0x7ffeef33bae0			size after assign = 3and content is:
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
test 246:	insert1: size of tmp = 2
			return value: 0x7ffeef33bae0
			return value: 0x7ffeef33bae0
			return value: 0x7ffeef33bae0
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
			size of tmp = 5
test 247:	insert2: size of tmp = 2
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
			size of tmp = 17
test 248:	insert3: size of tmp = 2
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 0x7ffeef33bae0 | 
			size of tmp = 8
test 249:	erase1: size of tmp = 2
			size of tmp = 0
			size of tmp = 2
			0x7ffeef33bae0 | 0x7ffeef33bae0 | 
			size of tmp = 2
			new elem after erase: 0x7ffeef33bae0
			size of tmp = 2
			0x7ffeef33bae0 | 
			size of tmp = 1
			size of tmp = 2
			0x7ffeef33bae0 | 
			size of tmp = 1
test 250:	erase2: size of tmp = 2
			new elem after erase: 0x7ffeef33bae0
			size of tmp = 1
			size of tmp = 2
			0x7ffeef33bae0 | 
			size of tmp = 1
			size of tmp = 2
			0x7ffeef33bae0 | 
			size of tmp = 1
test 251:	clear: size before clear: 2 | size after clear: 0new elem pushed after clear: 0x7ffeef33bae0
test 252:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 13 ------
--------------------------------
		VECTOR TYPE: std::string

test 253:	operator[]: salut salut salut salut salut salut 
test 254:	size: 6
test 255:	capacity: 6
test 256:	empty: 0
test 257:	iterators: salut salut salut salut salut salut 
test 258:	at: salut salut salut salut salut salut vector
test 259:	front: salut
test 260:	back: salut
test 261:	push_back: new elem = salut
test 262:	pop_back: new elem = salut
test 263:	swap: size of tmp = 7 and size of vec = 6
			size of tmp = 6 and size of vec = 7
test 264:	resize: size of tmp = 7
			new elem = salut			size of tmp after resize = 3
test 265:	assign1: size of tmp = 7
			new elem = salut			size after assign = 3and content is:
			salut | salut | salut | 
test 266:	assign2: size of tmp = 7
			new elem = salut			size after assign = 3and content is:
			salut | salut | salut | 
test 267:	insert1: size of tmp = 7
			return value: salut
			return value: salut
			return value: salut
			salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 10
test 268:	insert2: size of tmp = 7
			salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 22
test 269:	insert3: size of tmp = 7
			salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 28
test 270:	erase1: size of tmp = 7
			size of tmp = 0
			size of tmp = 7
			salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 7
			new elem after erase: salut
			size of tmp = 7
			salut | salut | salut | salut | salut | salut | 
			size of tmp = 6
			size of tmp = 7
			salut | 
			size of tmp = 1
test 271:	erase2: size of tmp = 7
			new elem after erase: salut
			size of tmp = 6
			size of tmp = 7
			salut | salut | salut | salut | salut | salut | 
			size of tmp = 6
			size of tmp = 7
			salut | 
			size of tmp = 6
test 272:	clear: size before clear: 7 | size after clear: 0new elem pushed after clear: salut
test 273:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 14 ------
--------------------------------
		VECTOR TYPE: std::string

test 274:	operator[]: jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf salut salut salut salut jbhkfbhsj 
test 275:	size: 6
test 276:	capacity: 6
test 277:	empty: 0
test 278:	iterators: jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf salut salut salut salut jbhkfbhsj 
test 279:	at: jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf salut salut salut salut jbhkfbhsj vector
test 280:	front: jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf
test 281:	back: jbhkfbhsj
test 282:	push_back: new elem = jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf
test 283:	pop_back: new elem = jbhkfbhsj
test 284:	swap: size of tmp = 7 and size of vec = 6
			size of tmp = 6 and size of vec = 7
test 285:	resize: size of tmp = 7
			new elem = jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf			size of tmp after resize = 3
test 286:	assign1: size of tmp = 7
			new elem = salut			size after assign = 3and content is:
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | 
test 287:	assign2: size of tmp = 7
			new elem = salut			size after assign = 3and content is:
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | 
test 288:	insert1: size of tmp = 7
			return value: jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf
			return value: jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf
			return value: jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | salut | salut | jbhkfbhsj | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | 
			size of tmp = 10
test 289:	insert2: size of tmp = 7
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | salut | salut | jbhkfbhsj | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | 
			size of tmp = 22
test 290:	insert3: size of tmp = 7
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | salut | salut | jbhkfbhsj | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | salut | salut | jbhkfbhsj | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | salut | salut | jbhkfbhsj | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | salut | salut | jbhkfbhsj | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | 
			size of tmp = 28
test 291:	erase1: size of tmp = 7
			size of tmp = 0
			size of tmp = 7
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | salut | salut | jbhkfbhsj | jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | 
			size of tmp = 7
			new elem after erase: jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf
			size of tmp = 7
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | salut | salut | jbhkfbhsj | 
			size of tmp = 6
			size of tmp = 7
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | 
			size of tmp = 1
test 292:	erase2: size of tmp = 7
			new elem after erase: salut
			size of tmp = 6
			size of tmp = 7
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | salut | salut | salut | salut | jbhkfbhsj | 
			size of tmp = 6
			size of tmp = 7
			jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf | 
			size of tmp = 6
test 293:	clear: size before clear: 7 | size after clear: 0new elem pushed after clear: jbhkfbhsjdhfbhsdkjfbjksdbkhfsdf
test 294:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 15 ------
--------------------------------
		VECTOR TYPE: std::string

test 295:	operator[]:     
test 296:	size: 4
test 297:	capacity: 4
test 298:	empty: 0
test 299:	iterators:     
test 300:	at:     vector
test 301:	front: 
test 302:	back: 
test 303:	push_back: new elem = 
test 304:	pop_back: new elem = 
test 305:	swap: size of tmp = 5 and size of vec = 4
			size of tmp = 4 and size of vec = 5
test 306:	resize: size of tmp = 5
			new elem = 			size of tmp after resize = 3
test 307:	assign1: size of tmp = 5
			new elem = 			size after assign = 3and content is:
			 |  |  | 
test 308:	assign2: size of tmp = 5
			new elem = 			size after assign = 3and content is:
			 |  |  | 
test 309:	insert1: size of tmp = 5
			return value: 
			return value: 
			return value: 
			 |  |  |  |  |  |  |  | 
			size of tmp = 8
test 310:	insert2: size of tmp = 5
			 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  | 
			size of tmp = 20
test 311:	insert3: size of tmp = 5
			 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  | 
			size of tmp = 20
test 312:	erase1: size of tmp = 5
			size of tmp = 0
			size of tmp = 5
			 |  |  |  |  | 
			size of tmp = 5
			new elem after erase: 
			size of tmp = 5
			 |  |  |  | 
			size of tmp = 4
			size of tmp = 5
			 | 
			size of tmp = 1
test 313:	erase2: size of tmp = 5
			new elem after erase: 
			size of tmp = 4
			size of tmp = 5
			 |  |  |  | 
			size of tmp = 4
			size of tmp = 5
			 | 
			size of tmp = 4
test 314:	clear: size before clear: 5 | size after clear: 0new elem pushed after clear: 
test 315:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 16 ------
--------------------------------
		VECTOR TYPE: std::string

test 316:	operator[]: salut salut salut salut salut salut 
test 317:	size: 6
test 318:	capacity: 6
test 319:	empty: 0
test 320:	iterators: salut salut salut salut salut salut 
test 321:	at: salut salut salut salut salut salut vector
test 322:	front: salut
test 323:	back: salut
test 324:	push_back: new elem = salut
test 325:	pop_back: new elem = salut
test 326:	swap: size of tmp = 7 and size of vec = 6
			size of tmp = 6 and size of vec = 7
test 327:	resize: size of tmp = 7
			new elem = salut			size of tmp after resize = 3
test 328:	assign1: size of tmp = 7
			new elem = salut			size after assign = 3and content is:
			salut | salut | salut | 
test 329:	assign2: size of tmp = 7
			new elem = salut			size after assign = 3and content is:
			salut | salut | salut | 
test 330:	insert1: size of tmp = 7
			return value: salut
			return value: salut
			return value: salut
			salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 10
test 331:	insert2: size of tmp = 7
			salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 22
test 332:	insert3: size of tmp = 7
			salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 28
test 333:	erase1: size of tmp = 7
			size of tmp = 0
			size of tmp = 7
			salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 7
			new elem after erase: salut
			size of tmp = 7
			salut | salut | salut | salut | salut | salut | 
			size of tmp = 6
			size of tmp = 7
			salut | 
			size of tmp = 1
test 334:	erase2: size of tmp = 7
			new elem after erase: salut
			size of tmp = 6
			size of tmp = 7
			salut | salut | salut | salut | salut | salut | 
			size of tmp = 6
			size of tmp = 7
			salut | 
			size of tmp = 6
test 335:	clear: size before clear: 7 | size after clear: 0new elem pushed after clear: salut
test 336:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 17 ------
--------------------------------
		VECTOR TYPE: std::string

test 337:	operator[]: salut salut salut salut salut salut 
test 338:	size: 6
test 339:	capacity: 6
test 340:	empty: 0
test 341:	iterators: salut salut salut salut salut salut 
test 342:	at: salut salut salut salut salut salut vector
test 343:	front: salut
test 344:	back: salut
test 345:	push_back: new elem = salut
test 346:	pop_back: new elem = salut
test 347:	swap: size of tmp = 7 and size of vec = 6
			size of tmp = 6 and size of vec = 7
test 348:	resize: size of tmp = 7
			new elem = salut			size of tmp after resize = 3
test 349:	assign1: size of tmp = 7
			new elem = salut			size after assign = 3and content is:
			salut | salut | salut | 
test 350:	assign2: size of tmp = 7
			new elem = salut			size after assign = 3and content is:
			salut | salut | salut | 
test 351:	insert1: size of tmp = 7
			return value: salut
			return value: salut
			return value: salut
			salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 10
test 352:	insert2: size of tmp = 7
			salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 22
test 353:	insert3: size of tmp = 7
			salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 28
test 354:	erase1: size of tmp = 7
			size of tmp = 0
			size of tmp = 7
			salut | salut | salut | salut | salut | salut | salut | 
			size of tmp = 7
			new elem after erase: salut
			size of tmp = 7
			salut | salut | salut | salut | salut | salut | 
			size of tmp = 6
			size of tmp = 7
			salut | 
			size of tmp = 1
test 355:	erase2: size of tmp = 7
			new elem after erase: salut
			size of tmp = 6
			size of tmp = 7
			salut | salut | salut | salut | salut | salut | 
			size of tmp = 6
			size of tmp = 7
			salut | 
			size of tmp = 6
test 356:	clear: size before clear: 7 | size after clear: 0new elem pushed after clear: salut
test 357:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 18 ------
--------------------------------
		VECTOR TYPE: Class test

test 358:	operator[]: Class test printing Class test printing 
test 359:	size: 2
test 360:	capacity: 2
test 361:	empty: 0
test 362:	iterators: Class test printing Class test printing 
test 363:	at: Class test printing Class test printing vector
test 364:	front: Class test printing
test 365:	back: Class test printing
test 366:	push_back: new elem = Class test printing
test 367:	pop_back: new elem = Class test printing
test 368:	swap: size of tmp = 3 and size of vec = 2
			size of tmp = 2 and size of vec = 3
test 369:	resize: size of tmp = 3
			new elem = Class test printing			size of tmp after resize = 3
test 370:	assign1: size of tmp = 3
			new elem = Class test printing			size after assign = 3and content is:
			Class test printing | Class test printing | Class test printing | 
test 371:	assign2: size of tmp = 3
			new elem = Class test printing			size after assign = 3and content is:
			Class test printing | Class test printing | Class test printing | 
test 372:	insert1: size of tmp = 3
			return value: Class test printing
			return value: Class test printing
			return value: Class test printing
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 6
test 373:	insert2: size of tmp = 3
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 18
test 374:	insert3: size of tmp = 3
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 12
test 375:	erase1: size of tmp = 3
			size of tmp = 0
			size of tmp = 3
			Class test printing | Class test printing | Class test printing | 
			size of tmp = 3
			new elem after erase: Class test printing
			size of tmp = 3
			Class test printing | Class test printing | 
			size of tmp = 2
			size of tmp = 3
			Class test printing | 
			size of tmp = 1
test 376:	erase2: size of tmp = 3
			new elem after erase: Class test printing
			size of tmp = 2
			size of tmp = 3
			Class test printing | Class test printing | 
			size of tmp = 2
			size of tmp = 3
			Class test printing | 
			size of tmp = 2
test 377:	clear: size before clear: 3 | size after clear: 0new elem pushed after clear: Class test printing
test 378:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 19 ------
--------------------------------
		VECTOR TYPE: Class test

test 379:	operator[]: Class test printing Class test printing 
test 380:	size: 2
test 381:	capacity: 2
test 382:	empty: 0
test 383:	iterators: Class test printing Class test printing 
test 384:	at: Class test printing Class test printing vector
test 385:	front: Class test printing
test 386:	back: Class test printing
test 387:	push_back: new elem = Class test printing
test 388:	pop_back: new elem = Class test printing
test 389:	swap: size of tmp = 3 and size of vec = 2
			size of tmp = 2 and size of vec = 3
test 390:	resize: size of tmp = 3
			new elem = Class test printing			size of tmp after resize = 3
test 391:	assign1: size of tmp = 3
			new elem = Class test printing			size after assign = 3and content is:
			Class test printing | Class test printing | Class test printing | 
test 392:	assign2: size of tmp = 3
			new elem = Class test printing			size after assign = 3and content is:
			Class test printing | Class test printing | Class test printing | 
test 393:	insert1: size of tmp = 3
			return value: Class test printing
			return value: Class test printing
			return value: Class test printing
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 6
test 394:	insert2: size of tmp = 3
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 18
test 395:	insert3: size of tmp = 3
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 12
test 396:	erase1: size of tmp = 3
			size of tmp = 0
			size of tmp = 3
			Class test printing | Class test printing | Class test printing | 
			size of tmp = 3
			new elem after erase: Class test printing
			size of tmp = 3
			Class test printing | Class test printing | 
			size of tmp = 2
			size of tmp = 3
			Class test printing | 
			size of tmp = 1
test 397:	erase2: size of tmp = 3
			new elem after erase: Class test printing
			size of tmp = 2
			size of tmp = 3
			Class test printing | Class test printing | 
			size of tmp = 2
			size of tmp = 3
			Class test printing | 
			size of tmp = 2
test 398:	clear: size before clear: 3 | size after clear: 0new elem pushed after clear: Class test printing
test 399:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 20 ------
--------------------------------
		VECTOR TYPE: Class test

test 400:	operator[]: Class test printing 
test 401:	size: 1
test 402:	capacity: 1
test 403:	empty: 0
test 404:	iterators: Class test printing 
test 405:	at: Class test printing vector
test 406:	front: Class test printing
test 407:	back: Class test printing
test 408:	push_back: new elem = Class test printing
test 409:	pop_back: new elem = Class test printing
test 410:	swap: size of tmp = 2 and size of vec = 1
			size of tmp = 1 and size of vec = 2
test 411:	resize: size of tmp = 2
			new elem = Class test printing			size of tmp after resize = 3
test 412:	assign1: size of tmp = 2
			new elem = Class test printing			size after assign = 3and content is:
			Class test printing | Class test printing | Class test printing | 
test 413:	assign2: size of tmp = 2
			new elem = Class test printing			size after assign = 3and content is:
			Class test printing | Class test printing | Class test printing | 
test 414:	insert1: size of tmp = 2
			return value: Class test printing
			return value: Class test printing
			return value: Class test printing
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 5
test 415:	insert2: size of tmp = 2
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 17
test 416:	insert3: size of tmp = 2
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 8
test 417:	erase1: size of tmp = 2
			size of tmp = 0
			size of tmp = 2
			Class test printing | Class test printing | 
			size of tmp = 2
			new elem after erase: Class test printing
			size of tmp = 2
			Class test printing | 
			size of tmp = 1
			size of tmp = 2
			Class test printing | 
			size of tmp = 1
test 418:	erase2: size of tmp = 2
			new elem after erase: Class test printing
			size of tmp = 1
			size of tmp = 2
			Class test printing | 
			size of tmp = 1
			size of tmp = 2
			Class test printing | 
			size of tmp = 1
test 419:	clear: size before clear: 2 | size after clear: 0new elem pushed after clear: Class test printing
test 420:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 21 ------
--------------------------------
		VECTOR TYPE: Class test

test 421:	operator[]: Class test printing 
test 422:	size: 1
test 423:	capacity: 1
test 424:	empty: 0
test 425:	iterators: Class test printing 
test 426:	at: Class test printing vector
test 427:	front: Class test printing
test 428:	back: Class test printing
test 429:	push_back: new elem = Class test printing
test 430:	pop_back: new elem = Class test printing
test 431:	swap: size of tmp = 2 and size of vec = 1
			size of tmp = 1 and size of vec = 2
test 432:	resize: size of tmp = 2
			new elem = Class test printing			size of tmp after resize = 3
test 433:	assign1: size of tmp = 2
			new elem = Class test printing			size after assign = 3and content is:
			Class test printing | Class test printing | Class test printing | 
test 434:	assign2: size of tmp = 2
			new elem = Class test printing			size after assign = 3and content is:
			Class test printing | Class test printing | Class test printing | 
test 435:	insert1: size of tmp = 2
			return value: Class test printing
			return value: Class test printing
			return value: Class test printing
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 5
test 436:	insert2: size of tmp = 2
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 17
test 437:	insert3: size of tmp = 2
			Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | Class test printing | 
			size of tmp = 8
test 438:	erase1: size of tmp = 2
			size of tmp = 0
			size of tmp = 2
			Class test printing | Class test printing | 
			size of tmp = 2
			new elem after erase: Class test printing
			size of tmp = 2
			Class test printing | 
			size of tmp = 1
			size of tmp = 2
			Class test printing | 
			size of tmp = 1
test 439:	erase2: size of tmp = 2
			new elem after erase: Class test printing
			size of tmp = 1
			size of tmp = 2
			Class test printing | 
			size of tmp = 1
			size of tmp = 2
			Class test printing | 
			size of tmp = 1
test 440:	clear: size before clear: 2 | size after clear: 0new elem pushed after clear: Class test printing
test 441:	operator=: tmp == vec (should be true): 1
			tmp == vec (should be false): 0
			

--------------------------------
------	TESTING VECTOR 22 ------
--------------------------------
		VECTOR TYPE: int

test 442:	operator[]: 100 100 100 100 100 
test 443:	size: 5
test 444:	capacity: 5
test 445:	empty: 0
test 446:	iterators: 100 100 100 100 100 
test 447:	at: 100 100 100 100 100 vector
test 448:	front: 100
test 449:	back: 100

--------------------------------
------	TESTING VECTOR 23 ------
--------------------------------
		VECTOR TYPE: int

test 450:	operator[]: 
test 451:	size: 0
test 452:	capacity: 0
test 453:	empty: 1
test 454:	iterators: 
test 455:	at: vector
test 456:	front: 
test 457:	back: 

--------------------------------
------	TESTING VECTOR 24 ------
--------------------------------
		VECTOR TYPE: char

test 458:	operator[]: c c c c c c c c c c c c 
test 459:	size: 12
test 460:	capacity: 12
test 461:	empty: 0
test 462:	iterators: c c c c c c c c c c c c 
test 463:	at: c c c c c c c c c c c c vector
test 464:	front: c
test 465:	back: c

--------------------------------
------	TESTING VECTOR 25 ------
--------------------------------
		VECTOR TYPE: char

test 466:	operator[]: c c c c c c c c c c c c 
test 467:	size: 12
test 468:	capacity: 12
test 469:	empty: 0
test 470:	iterators: c c c c c c c c c c c c 
test 471:	at: c c c c c c c c c c c c vector
test 472:	front: c
test 473:	back: c

--------------------------------
------	TESTING VECTOR 26 ------
--------------------------------
		VECTOR TYPE: std::string

test 474:	operator[]: bonjour bonjour bonjour 
test 475:	size: 3
test 476:	capacity: 3
test 477:	empty: 0
test 478:	iterators: bonjour bonjour bonjour 
test 479:	at: bonjour bonjour bonjour vector
test 480:	front: bonjour
test 481:	back: bonjour