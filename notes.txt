NOTIONS :

types >> penser a les declarer au moment souhaite
------------------------------------------------------------------------------
for >> peut iterer plusieurs operandes, pas forcement besoin de les declarer
------------------------------------------------------------------------------
constructeur
------------------------------------------------------------------------------
destructeur 
------------------------------------------------------------------------------
copie constructeur >> copie les valeur mais AUSSI LES POINTEURS
>> bien penser a utiliser initialization lsit dans cp constructor et appeler tous les copy
constructor des membres de la classe

>> pas pareil que surchage operator=
pour surcharge operator= interessant d'utiliser peut etre l'operateur swap (et le copy construcor)
------------------------------------------------------------------------------
surcharge constructeur / destructeur etc >> surcharger une fonction / methode >> 
meme nom mais au moins un argument de type different
------------------------------------------------------------------------------
surcharge d'operateur
------------------------------------------------------------------------------
attributs (prive) / methodes (publique) >> les attributs doivent toujours etre prives
>> on a aussi (protege)
------------------------------------------------------------------------------
pointeur this >> contient l'addresse de l'objet lui meme
------------------------------------------------------------------------------
class integree dans d'autres classes
------------------------------------------------------------------------------
const pour arguments / methodes
const a la fin d'une methode >> indiqeu que l'objet ne pourra aps etre mnodifie
et seuls les methodes const peuvent etre appelees sur un objet const
------------------------------------------------------------------------------
refs >> dans le cas ou on copie un gros objet et pas besoin de modif (TOUJOURS PASSER LES
CLASSES PAR REF sauf dans le cas de copie constructor)
------------------------------------------------------------------------------
pointeur sur classes dans d'autres classes (marche comme les structures)
------------------------------------------------------------------------------
new / delete || new[] delete[]
------------------------------------------------------------------------------
utilisation des booleans

------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------
- attributs / methodes
- getters / setters
- public / protected / private
- classe integree dans une autre class (nested class)
- methodes statiques
- initialization list
- constructor
- copy constructor
- destructor
- copy and swap idiom
- surcharge d'operateur
- surcharge de fonction via le type des arguments
- heritage
- multiple heritage
- masquage des fonctions dans la classe fille
- classe concretes / abstraites
- polymorphisme
- resolution dynamique des liens (virtual)
- references
- pointeurs sur fonctions
- booleans
- const
- exceptions (try / catch / throw)
- pointeur this
- new / delete
- for
- define
- gestion des flux
- les casts
- templates (fonctions / class)
- vector
- deque
- stack (LIFO)
- queue (FIFO)
- priority queue
- map
- ternaire
- iterateurs
- foncteurs
- algortihm
- explicit keyword / implicit conversion des arguments en argument de constructeur
- nom dependant et typename
- donnees et membres statiques
- classes de traits
